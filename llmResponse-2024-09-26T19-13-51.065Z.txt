```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, ActivityIndicator, ScrollView, Keyboard, TouchableWithoutFeedback } from 'react-native';
import axios from 'axios';
import { StatusBar } from 'expo-status-bar';
import { LinearGradient } from 'expo-linear-gradient';

const API_URL = 'https://apihub.staging.appply.link/chatgpt';

const App = () => {
  const [heroName, setHeroName] = useState('');
  const [villainName, setVillainName] = useState('');
  const [plot, setPlot] = useState('');
  const [story, setStory] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');
  const [currentPage, setCurrentPage] = useState(0);

  useEffect(() => {
    const splashTimer = setTimeout(() => {
      // Splash screen logic would go here
    }, 2000);

    return () => clearTimeout(splashTimer);
  }, []);

  const generateStory = async () => {
    setIsGenerating(true);
    setError('');
    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "You are a fairy tale storyteller for children. Create a short, engaging story of maximum 100 words based on the given hero, villain, and plot. The story should be child-friendly and avoid scary elements." },
          { role: "user", content: `Create a fairy tale with hero: ${heroName}, villain: ${villainName}, and plot: ${plot}` }
        ],
        model: "gpt-4o"
      }, { timeout: 120000 });
      
      const generatedStory = response.data.response;
      setStory(generatedStory);
      setCurrentPage(0);
    } catch (err) {
      setError('Oops! Something went wrong. Please try again.');
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  };

  const storyPages = story.match(/.{1,100}(\s|$)/g) || [];

  const handlePageChange = (direction) => {
    if (direction === 'next' && currentPage < storyPages.length - 1) {
      setCurrentPage(currentPage + 1);
    } else if (direction === 'prev' && currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <LinearGradient colors={['#FFF8DC', '#FFEFD5']} style={styles.container}>
        <StatusBar style="auto" />
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="Hero Name"
            value={heroName}
            onChangeText={setHeroName}
            maxLength={30}
          />
          <TextInput
            style={styles.input}
            placeholder="Villain Name"
            value={villainName}
            onChangeText={setVillainName}
            maxLength={30}
          />
          <TextInput
            style={styles.input}
            placeholder="Plot"
            value={plot}
            onChangeText={setPlot}
            maxLength={100}
          />
          <TouchableOpacity
            style={[styles.button, isGenerating && styles.buttonDisabled]}
            onPress={generateStory}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <View style={styles.generatingContainer}>
                <ActivityIndicator size="small" color="#FFF" />
                <Text style={styles.buttonText}>Generating</Text>
              </View>
            ) : (
              <Text style={styles.buttonText}>Generate Story</Text>
            )}
          </TouchableOpacity>
          {error ? <Text style={styles.errorText}>{error}</Text> : null}
        </View>
        {story ? (
          <View style={styles.storyContainer}>
            <ScrollView contentContainerStyle={styles.storyContent}>
              <Text style={styles.storyText}>{storyPages[currentPage]}</Text>
            </ScrollView>
            <View style={styles.pageControls}>
              <TouchableOpacity onPress={() => handlePageChange('prev')} disabled={currentPage === 0}>
                <Text style={[styles.pageControlText, currentPage === 0 && styles.pageControlDisabled]}>Previous</Text>
              </TouchableOpacity>
              <Text style={styles.pageNumber}>{currentPage + 1} / {storyPages.length}</Text>
              <TouchableOpacity onPress={() => handlePageChange('next')} disabled={currentPage === storyPages.length - 1}>
                <Text style={[styles.pageControlText, currentPage === storyPages.length - 1 && styles.pageControlDisabled]}>Next</Text>
              </TouchableOpacity>
            </View>
          </View>
        ) : null}
      </LinearGradient>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 50,
    paddingHorizontal: 20,
  },
  inputContainer: {
    marginBottom: 20,
  },
  input: {
    backgroundColor: '#FFF',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#4CAF50',
    borderRadius: 5,
    padding: 15,
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#A5D6A7',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  generatingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  errorText: {
    color: 'red',
    marginTop: 10,
    textAlign: 'center',
  },
  storyContainer: {
    flex: 1,
    backgroundColor: '#FFF',
    borderRadius: 10,
    padding: 20,
    marginTop: 20,
  },
  storyContent: {
    flexGrow: 1,
  },
  storyText: {
    fontSize: 18,
    lineHeight: 24,
  },
  pageControls: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 20,
  },
  pageControlText: {
    color: '#4CAF50',
    fontSize: 16,
  },
  pageControlDisabled: {
    color: '#A5D6A7',
  },
  pageNumber: {
    fontSize: 16,
  },
});

export default App;
// End of App.js
```